#!/usr/bin/env python2

#############################################################################
##                                                                         ##
##      The scapy/ and tests/ code here are a modified fork of the         ##
##      MPTCP-capable scapy code by Nicolas Maitre at                      ##
##      https://github.com/nimai/mptcp-scapy                               ##
##                                                                         ##
#############################################################################

import os
# use the local version (subdirectory "scapy" in the current directory)
os.putenv("PYTHONPATH","%s:%s" % (os.getcwd(), os.getenv("PYTHONPATH")))

# Set log level to benefit from Scapy warnings
import logging
logging.getLogger("scapy").setLevel(1)

from scapy.all import *
import time

from hashlib import sha1
import hmac

class MptcpPktsAnalyzer:

	start_time = time.time()
	print "Start processing the pcap file...this might take sometime"

	# Get all the packets in a list
	pkts = rdpcap("mptcp-assignment.pcap")

	print "Finished capturing the pcap packets in a readable format!"

	print("--- %s Elapsed Seconds ---" % (time.time() - start_time))

	def compute_token(self, rcv_key):
		from hashlib import sha1
		import hmac

		#key
		key = rcv_key

		hashed = hmac.new(key, sha1)

		#The signature
		return hashed.digest().encode("base64").rstrip('\n')


	def mptcp_connections(pkts):
		"""Task 1 functions"""
		count = 0
		#MPTCP_Capable = 0x0
		#MPTCP_CapableACK ---> successful handshake
		print "======================================================================"
		print "Successful Handshake --- Look for Ack packets with MPTCP option Header"
		print """Token = connectionID = SHA1(key)[0-32] of Other party's key. (Capture from
		 either step 2 or 3 in the first handshake)"""
		print "Total packets: %s" % len(pkts)
		print "======================================================================"
		for i in range(len(pkts)):
			if(MPTCP_CapableACK in pkts[i] and pkts[i][TCPOption_MP].mptcp.subtype == 0):
				count +=1 #Count the number of distinct MPTCP connections
				
				#Compute the token
				key = pkts[i][TCPOption_MP].mptcp.rcv_key #receivers key
				bytes = str.encode(key)
				hash_object = sha1(bytes)
				hex_dig = hash_object.hexdigest()

				print("New MPTCP Connection src: %s; dest: %s; Sender's key: %s; Receivers key: %s; Token: %s" % 
					(pkts[i][IP].src, pkts[i][IP].dst,
					pkts[i][TCPOption_MP].mptcp.snd_key, pkts[i][TCPOption_MP].mptcp.rcv_key, hex_dig))
		print "Total Count: %i" % count

	def payload_data(pkts):
		"""Task 2 function"""

		#MPTCP WITH SUBFLOW CONNECTIONS
		#MPTCP_JOINs = 0x1
		if(TCPOption_MP in pkts[i] and pkts[i][TCPOption_MP].mptcp.subtype == 1):
			print("New MPTCP Connection src: %s; dest: %s; Sender's key: %s; Receivers key: %s;" % 
				(pkts[i][IP].src, pkts[i][IP].dst,pkts[i][TCPOption_MP].mptcp.snd_key, 
					pkts[i][TCPOption_MP].mptcp.rcv_key))	


	# Program start up
	while True:
		task = input("Perform a task (1: Task One or 2: Task 2 0r 3: Exit) ")
		if task == 1:
			mptcp_connections(pkts)
		elif task == 2:
			payload_data(pkts)
		elif task == 3:
			sys.exit(0)
		else:
			print "Please select 1 or 2. Try Again!"