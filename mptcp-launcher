#!/usr/bin/env python2

#############################################################################
##                                                                         ##
##      The scapy/ and tests/ code here are a modified fork of the         ##
##      MPTCP-capable scapy code by Nicolas Maitre at                      ##
##      https://github.com/nimai/mptcp-scapy                               ##
##                                                                         ##
#############################################################################

import os
# use the local version (subdirectory "scapy" in the current directory)
os.putenv("PYTHONPATH","%s:%s" % (os.getcwd(), os.getenv("PYTHONPATH")))

# Set log level to benefit from Scapy warnings
import logging
logging.getLogger("scapy").setLevel(1)

from scapy.all import *
import time

class MptcpPktsAnalyzer:

	def key2tokenAndDSN(self, key):
	    """Returns the token and dsn from a key
	    Generate a simple SHA1 hash of the key
	    key is a 64bits integer
	    Token is a 32bits integer, dsn is a 64bits integer
	    """
	    import binascii
	    import struct
	    import hashlib

	    self.keystr = struct.pack("!Q", key)
	    self.h = hashlib.sha1(self.keystr.rjust(8,'\00'))
	    self.shastr=self.h.digest() # binary
	    #shastr = struct.pack("!IIIII", *struct.unpack("@IIIII",shastr)) #to net
	    self.token, self.dsn = self.shastr[0:4], self.shastr[-8:]
	    #print "raw: %s (len=%i)"%(shastr,len(shastr)) 
	    #print "hex: %s"% binascii.hexlify(token), "%s"%binascii.hexlify(dsn)
	    self.d1, self.d2 = struct.unpack("!II",self.dsn)
	    self.token, self.dsn = (struct.unpack("!I",self.token)[0], (long(self.d2)<<32)+self.d1)
	    #print "token: %x"% token
	    #print "dsn: %x" % dsn
	    return (self.token, self.dsn)


	def mptcp_connections(self, pkts):
		"""Identify distinct MPTCP Connections that rechead Successful 
		handshake --- Look for Ack packets with MPTCP option Header
		For each MPTCP connection report Receiver's token value"""
		count = 0
		#MPTCP_Capable = 0x0
		#MPTCP_CapableACK ---> successful handshake
		print "======================================================================"
		print "Successful Handshake --- Look for Ack packets with MPTCP option Header"
		print """Token = connectionID = SHA1(key)[0-32] of Other party's key. (Capture from
		 either step 2 or 3 in the first handshake)"""
		print "Total packets: %s" % len(pkts)
		print "======================================================================"
		for i in range(len(pkts)):
			if(MPTCP_CapableACK in pkts[i] and pkts[i][TCPOption_MP].mptcp.subtype == 0):
				count +=1 #Count the number of distinct MPTCP connections
				
				#Compute the receiver's token
				self.key_rcv = pkts[i][TCPOption_MP].mptcp.rcv_key
				self.rcv_token, self.rcv_dsn = self.key2tokenAndDSN(self.key_rcv)

				#Compute the sender's token
				self.key_snd = pkts[i][TCPOption_MP].mptcp.snd_key
				self.snd_token, self.snd_dsn = self.key2tokenAndDSN(self.key_snd)

				print ("%i. New MPTCP Connection (Successful Handshake) src: %s; dest: %s; Sender's key: %s; Receiver's key: %s; Recivers Token: %s; Sender's Token: %s" % (count, pkts[i][IP].src, pkts[i][IP].dst, pkts[i][TCPOption_MP].mptcp.snd_key, pkts[i][TCPOption_MP].mptcp.rcv_key, self.rcv_token, self.snd_token))
		print "Total Count: %i" % count

	def payload_data(self, pkts):
		"""Report the number of payload bytes cumulatively exchanged over each MPTCP
		connection"""

		#Get all the payload bytes exchanged over MPTCP connections
		payload_bytes = 0
		for i in range(50):
			if(TCPOption_MP in pkts[i] and pkts[i][TCPOption_MP].mptcp.subtype == 2 and Raw in pkts[i]):
				payload_bytes += len(pkts[i][Raw].load)
				print("DSN: %s; subflow_seqnum: %s; Data(bytes): %s" % (pkts[i][TCPOption_MP].mptcp.dsn, pkts[i][TCPOption_MP].mptcp.subflow_seqnum, len(pkts[i][Raw].load)))

		print "Total Number of payload_bytes in the file: %s" % (payload_bytes)
		#MPTCP WITH SUBFLOW CONNECTIONS
		#MPTCP_JOINs = 0x1
		print "New SUBFLOW Connections..."
		for i in range(len(pkts)):
			if(TCPOption_MP in pkts[i] and pkts[i][TCPOption_MP].mptcp.subtype == 1 and pkts[i][TCPOption_MP].mptcp.rcv_token in pkts[i]):
				print pkts[i][TCPOption_MP].show()
				print("New subflow Connection src: %s; dest: %s; rcv_token: %s" % (pkts[i][IP].src, pkts[i][IP].dst, pkts[i][TCPOption_MP].mptcp.rcv_token))	


# Program start up
start_time = time.time()
print "Start processing the pcap file...this might take sometime"

# Get all the packets in a list
pkts = rdpcap("mptcp-assignment.pcap")

print "Finished capturing the pcap packets in a readable format!"

print("--- %s Elapsed Seconds ---" % (time.time() - start_time))

mptcp = MptcpPktsAnalyzer()

while True:
	task = input("Perform a task (1: Task One or 2: Task 2 0r 3: Exit) ")
	if task == 1:
		mptcp.mptcp_connections(pkts)
	elif task == 2:
		mptcp.payload_data(pkts)
	elif task == 3:
		sys.exit(0)
	else:
		print "Please select 1 or 2. Try Again!"